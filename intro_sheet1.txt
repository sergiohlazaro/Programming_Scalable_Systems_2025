1. Caracter√≠sticas Claves de Elixir
‚úÖ Funcional
    - No hay estado mutable como en lenguajes orientados a objetos.
    - Todo se trata como expresiones matem√°ticas.
    - Se basa en funciones puras, lo que facilita el mantenimiento del c√≥digo.

‚úÖ Concurrencia Nativa
    - Usa Procesos Livianos dentro de la BEAM.
    - No son threads del sistema operativo.
    - Permite que un programa maneje millones de conexiones concurrentes.

‚úÖ Escalabilidad y Distribuci√≥n
    - Puedes correr Elixir en m√∫ltiples nodos f√°cilmente.
    - Se dise√±√≥ para alta disponibilidad y distribuci√≥n.

‚úÖ F√°cil de Leer y Escribir
    - Sintaxis clara y sencilla.
    - Inspirado en Ruby, pero sin perder la eficiencia de Erlang.

2. Instalaci√≥n y Entorno de Desarrollo

$sudo apt-get install elixir    # En Debian/Ubuntu

$elixir -v                      # Comprobamos que se ha instalado correctamente

3. Trabajando con Elixir

- Para ejecutar comandos en Elixir usar iex, que es su REPL (Read, Eval, Print, Loop).

- Abrir iex en la terminal: $iex
- Para ejecutar operaciones matem√°ticas: 
            
            $iex(1)> 5 + 3
            8
            $iex(2)> 10 / 2
            5.0

4. Tipos de Datos

- N√∫meros
    $iex> 10       # Enteros
    $iex> 3.14     # Flotantes
    $iex> 0x1F     # Hexadecimales

- √Åtomos (:atom)
    $iex> :ok
    :ok
    $iex> :error
    :error
    $iex> :hello
    :hello

- Cadenas (String); Las cadenas son binaries en UTF-8.
    $iex> "Hola mundo"
    "Hola mundo"
    $iex> "Elixir" <> " Rocks!"
    "Elixir Rocks!"

-Listas ([ ])
    $iex> [1, 2, 3]
    [1, 2, 3]
    $iex> [1 | [2, 3]]
    [1, 2, 3]
    $iex> length([1,2,3])
    3

- Tuplas ({ })
    $iex> {1, 2, 3}
    {1, 2, 3}
    $iex> {:ok, "Todo bien"}
    {:ok, "Todo bien"}

5. Variables y Pattern Matching. 

- Las variables en Elixir no almacenan valores, sino que se enlazan a ellos.

    $iex> x = 5
    5
    $iex> y = 10
    10
    $iex> x + y
    15

‚ö†Ô∏è Las variables son inmutables:

    $iex> x = 5
    $iex> x = 10  # Esto no re-asigna x, simplemente la enlaza a un nuevo valor.

‚ö†Ô∏è Pattern Matching. ES UNA T√âCNICA CLAVE DE ELIXIR.

    $iex> {a, b} = {1, 2}
    $iex> a
    1
    $iex> b
    2

‚ö†Ô∏è Si el patr√≥n no coincide, lanza un error:

    $iex> {x, y} = {1, 2, 3}  # Error, porque la tupla no coincide

6. Funciones en Elixir

- Las funciones se definen dentro de m√≥dulos.

- Definiendo un m√≥dulo con funciones:

    defmodule Matematica do
        def suma(a, b) do
            a + b
        end

        def resta(a, b) do
            a - b
        end
    end

- Llamando funciones:

    $iex> Matematica.suma(5, 3)
    8

- Funciones An√≥nimas:

    $iex> suma = fn a, b -> a + b end
    $iex> suma.(2, 3)
    5

7. Pipe Operator (|>)

- Permite encadenar funciones sin necesidad de anidarlas.

    $iex> "elixir" |> String.upcase() |> String.reverse()
    "RIXILE"

8. Mix: Herramienta para Proyectos

- mix es la herramienta para crear y gestionar proyectos en Elixir.

‚ö†Ô∏è Crear un nuevo proyecto: $mix new mi_proyecto

- Esto generar√° una estructura con archivos y carpetas necesarias.

‚ö†Ô∏è Hasta este punto tenemos una breve introducci√≥n sobre Elixir y como funciona.

- Tras crear nuestro primer proyeco:

$ mix new exercises1
    * creating README.md
    * creating .formatter.exs
    * creating .gitignore
    * creating mix.exs
    * creating lib
    * creating lib/exercises1.ex
    * creating test
    * creating test/test_helper.exs
    * creating test/exercises1_test.exs

Your Mix project was created successfully.
You can use "mix" to compile it, test it, and more:

    cd exercises1
    mix test

Run "mix help" for more commands.

‚ö†Ô∏è Para los ejercicios, trabajar√°s principalmente en el archivo: lib/exercises1.ex
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ejercicio 7: match_123

üìå Objetivo:

- Crear una funci√≥n match_123/1 que reciba una lista y haga pattern matching para devolver los elementos despu√©s de [1,2,3].

‚úçÔ∏è Implementaci√≥n en lib/exercises1.ex

defmodule Sheet1 do
  def match_123([1, 2, 3 | tail]) do
    tail
  end
end

Ejercicio 8: match_string

üìå Objetivo:

- Crear una funci√≥n que haga pattern matching con strings.

‚úçÔ∏è Implementaci√≥n

defmodule Sheet1 do
  def match_123([1, 2, 3 | tail]), do: tail

  def match_string("Hello " <> name) do
    name
  end
end

Ejercicio 9: match_1234

üìå Objetivo:

- Modificar match_123 para que use el operador ++.

‚úçÔ∏è Implementaci√≥n

defmodule Sheet1 do
  def match_123([1, 2, 3 | tail]), do: tail

  def match_string("Hello " <> name), do: name

  def match_1234([1, 2, 3] ++ tail), do: tail
end

üîç Pruebas Autom√°ticas

- Crea el archivo test/sheet1_test.exs con:

defmodule Sheet1Test do
  use ExUnit.Case
  doctest Sheet1

  test "match_123 works correctly" do
    assert Sheet1.match_123([1, 2, 3, 4, 5]) == [4, 5]
  end

  test "match_string works correctly" do
    assert Sheet1.match_string("Hello world") == "world"
  end
end

Ejercicio 4: Variable Binding

üìå Objetivo:

- Investigar el comportamiento de las variables en Elixir respondiendo:

    ¬øQu√© pasa si una variable no est√° definida?
    ¬øQu√© pasa si una variable se vuelve a asignar?

‚úçÔ∏è Pruebas en iex

- Abre iex con:

    $iex -S mix

1. ¬øQu√© pasa si una variable no est√° definida?

    $iex> x
    ** (CompileError) iex:1: undefined function x/0 (no function clause matching in x/0)

üöÄ Explicaci√≥n:

- En Elixir, una variable debe estar previamente asignada antes de usarse.

2. ¬øQu√© pasa si una variable se vuelve a asignar?

    $iex> x = 5
    5
    $iex> x = 10
    10
    $iex> x
    10

üöÄ Explicaci√≥n:

- Las variables en Elixir no se reasignan, simplemente se enlazan a un nuevo valor.

Ejercicio 5: Tuplas y Listas

üìå Objetivo:

- Responder las siguientes preguntas con c√≥digo:

    ¬øPuedo mezclar tipos en listas y tuplas?
    ¬øPuedo poner tuplas dentro de listas?
    ¬øPuedo poner listas dentro de tuplas?

‚úçÔ∏è Pruebas en iex

    $iex> lista = [1, :ok, "texto", {1,2}]
    [1, :ok, "texto", {1, 2}]
    $iex> tupla = {1, [2, 3], "hola"}
    {1, [2, 3], "hola"}

üöÄ Explicaci√≥n:

- En Elixir puedes mezclar tipos en listas y tuplas.
- Las tuplas pueden estar dentro de listas y viceversa.

Ejercicio 6: Pattern Matching

üìå Objetivo:

- Entender c√≥mo funciona pattern matching con diferentes situaciones:

    ¬øQu√© pasa si el patr√≥n es una constante?
    ¬øQu√© pasa si el patr√≥n y la expresi√≥n no coinciden?
    ¬øQu√© pasa si una variable en el patr√≥n ya est√° vinculada?

‚úçÔ∏è Pruebas en iex

    $iex> 5 = 5
    5
    $iex> 5 = 10
    ** (MatchError) no match of right hand side value: 10

üöÄ Explicaci√≥n:

- Si intentas hacer pattern matching con una constante, debe coincidir con el valor.

    $iex> x = 10
    $iex> 10 = x
    10
    $iex> 5 = x
    ** (MatchError) no match of right hand side value: 10

üöÄ Explicaci√≥n:

- Si la variable ya tiene un valor asignado, debe coincidir con el patr√≥n.

‚ö†Ô∏è Hasta este punto tenemos la introducci√≥n con la resoluci√≥n de la primera hoja de ejercicios. Los pr√≥ximos ejercicios se subir√°n en el futuro.
